{"version":3,"file":"commonHelpers.js","sources":["../src/img/icon.svg","../src/js/1-timer.js"],"sourcesContent":["export default \"__VITE_ASSET__65a791c1__\"","// Импорт необходимых библиотек и ресурсов\nimport flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\nimport icon from '../img/icon.svg';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Выбор кнопки и инициализация ее с отключенным состоянием\nconst btn = document.querySelector('button');\nbtn.disabled = true;\n\n// Опции для выбора даты с помощью flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  // Функция обратного вызова при закрытии выбора даты\n  onClose(selectedDates) {\n    const date = Date.now();\n    if (selectedDates[0] < date) {\n      // Отключить кнопку и показать сообщение при выборе прошедшей даты\n      btn.disabled = true;\n      iziToast.show({\n        iconUrl: icon,\n        message: 'Пожалуйста, выберите дату в будущем',\n        messageColor: '#ffffff',\n        color: '#ef4040',\n        close: false,\n        position: 'topRight',\n      });\n    } else {\n      // Включить кнопку, если выбранная дата находится в будущем\n      btn.disabled = false;\n      timer;\n    }\n  },\n};\n\n// Выбор элемента ввода и инициализация выбора даты с помощью flatpickr\nconst input = document.querySelector('#datetime-picker');\nflatpickr(input, options);\n\n// Класс таймера для функциональности обратного отсчета\nclass Timer {\n  constructor({ onTick }) {\n    this.onTick = onTick;\n    this.interval = null;\n  }\n  start() {\n    // Отключить кнопку и ввод при запуске таймера\n    btn.disabled = true;\n    input.disabled = true;\n    const startTime = new Date(input.value).getTime();\n    // Обновление таймера каждую секунду\n    this.interval = setInterval(() => {\n      const currentTime = Date.now();\n      const delta = startTime - currentTime;\n      // Преобразование миллисекунд в дни, часы, минуты и секунды\n      const time = this.convertMs(delta);\n      if (delta <= 0) {\n        // Остановить таймер по завершении обратного отсчета\n        this.stop();\n        return;\n      }\n      // Обновление отображения таймера\n      this.onTick(time);\n    }, 1000);\n  }\n  stop() {\n    // Очистить интервал и включить кнопку и ввод при остановке таймера\n    clearInterval(this.interval);\n    btn.disabled = false;\n    input.disabled = false;\n  }\n\n  // Преобразование миллисекунд в дни, часы, минуты и секунды\n  convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = this.pad(Math.floor(ms / day));\n    const hours = this.pad(Math.floor((ms % day) / hour));\n    const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n    const seconds = this.pad(\n      Math.floor((((ms % day) % hour) % minute) / second)\n    );\n\n    return { days, hours, minutes, seconds };\n  }\n\n  // Вспомогательная функция для добавления ведущего нуля к числам < 10\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\n// Выбор элементов отображения таймера\nconst dataDay = document.querySelector('.value[data-days]');\nconst dataHour = document.querySelector('.value[data-hours]');\nconst dataMinute = document.querySelector('.value[data-minutes]');\nconst dataSecond = document.querySelector('.value[data-seconds]');\n\n// Функция для обновления отображения таймера\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  dataDay.textContent = `${days}`;\n  dataHour.textContent = `${hours}`;\n  dataMinute.textContent = `${minutes}`;\n  dataSecond.textContent = `${seconds}`;\n}\n\n// Создание нового экземпляра таймера\nconst timer = new Timer({\n  onTick: updateTimer,\n});\n\n// Слушатель события клика кнопки для запуска таймера\nbtn.addEventListener('click', timer.start.bind(timer));\n"],"names":["icon","btn","options","selectedDates","date","iziToast","input","flatpickr","Timer","onTick","startTime","currentTime","delta","time","ms","days","hours","minutes","seconds","value","dataDay","dataHour","dataMinute","dataSecond","updateTimer","timer"],"mappings":"0FAAA,MAAeA,EAAA,0CCQTC,EAAM,SAAS,cAAc,QAAQ,EAC3CA,EAAI,SAAW,GAGf,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrB,MAAMC,EAAO,KAAK,MACdD,EAAc,CAAC,EAAIC,GAErBH,EAAI,SAAW,GACfI,EAAS,KAAK,CACZ,QAASL,EACT,QAAS,sCACT,aAAc,UACd,MAAO,UACP,MAAO,GACP,SAAU,UAClB,CAAO,GAGDC,EAAI,SAAW,EAGlB,CACH,EAGMK,EAAQ,SAAS,cAAc,kBAAkB,EACvDC,EAAUD,EAAOJ,CAAO,EAGxB,MAAMM,CAAM,CACV,YAAY,CAAE,OAAAC,GAAU,CACtB,KAAK,OAASA,EACd,KAAK,SAAW,IACjB,CACD,OAAQ,CAENR,EAAI,SAAW,GACfK,EAAM,SAAW,GACjB,MAAMI,EAAY,IAAI,KAAKJ,EAAM,KAAK,EAAE,UAExC,KAAK,SAAW,YAAY,IAAM,CAChC,MAAMK,EAAc,KAAK,MACnBC,EAAQF,EAAYC,EAEpBE,EAAO,KAAK,UAAUD,CAAK,EACjC,GAAIA,GAAS,EAAG,CAEd,KAAK,KAAI,EACT,MACD,CAED,KAAK,OAAOC,CAAI,CACjB,EAAE,GAAI,CACR,CACD,MAAO,CAEL,cAAc,KAAK,QAAQ,EAC3BZ,EAAI,SAAW,GACfK,EAAM,SAAW,EAClB,CAGD,UAAUQ,EAAI,CAMZ,MAAMC,EAAO,KAAK,IAAI,KAAK,MAAMD,EAAK,KAAG,CAAC,EACpCE,EAAQ,KAAK,IAAI,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EAC9CG,EAAU,KAAK,IAAI,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,CAAC,EAC3DI,EAAU,KAAK,IACnB,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,CACxD,EAEI,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAGD,IAAIC,EAAO,CACT,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,CACH,CAGA,MAAMC,EAAU,SAAS,cAAc,mBAAmB,EACpDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAa,SAAS,cAAc,sBAAsB,EAC1DC,EAAa,SAAS,cAAc,sBAAsB,EAGhE,SAASC,EAAY,CAAE,KAAAT,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDE,EAAQ,YAAc,GAAGL,CAAI,GAC7BM,EAAS,YAAc,GAAGL,CAAK,GAC/BM,EAAW,YAAc,GAAGL,CAAO,GACnCM,EAAW,YAAc,GAAGL,CAAO,EACrC,CAGA,MAAMO,EAAQ,IAAIjB,EAAM,CACtB,OAAQgB,CACV,CAAC,EAGDvB,EAAI,iBAAiB,QAASwB,EAAM,MAAM,KAAKA,CAAK,CAAC"}